version: '3.7'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch
      - kafka1
      # - kafka2
      # - kafka3

  kafka1:
    build:
      context: kafka/
      args:
        KAFKA_VERSION: $KAFKA_VERSION
    networks:
      - elk
    depends_on:
      - zoo1
      # - zoo2
      # - zoo3
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LOG_RETENTION_HOURS: "168"
      KAFKA_LOG_RETENTION_BYTES: "100000000"
      # KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_CREATE_TOPICS: "log:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
  
  # kafka2:
  #   build:
  #     context: kafka/
  #     args:
  #       KAFKA_VERSION: $KAFKA_VERSION
  #   depends_on:
  #     - zoo1
  #     - zoo2
  #     - zoo3
  #   hostname: kafka2
  #   ports:
  #     - "9093:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ADVERTISED_HOST_NAME: kafka2
  #     KAFKA_ADVERTISED_PORT: 9092
  #     KAFKA_LOG_RETENTION_HOURS: "168"
  #     KAFKA_LOG_RETENTION_BYTES: "100000000"
  #     KAFKA_LOG_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
  #     KAFKA_CREATE_TOPICS: "log:3:3"
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

  # kafka3:
  #   build:
  #     context: kafka/
  #     args:
  #       KAFKA_VERSION: $KAFKA_VERSION
  #   depends_on:
  #     - zoo1
  #     - zoo2
  #     - zoo3
  #   hostname: kafka3
  #   ports:
  #     - "9094:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ADVERTISED_HOST_NAME: kafka3
  #     KAFKA_ADVERTISED_PORT: 9092
  #     KAFKA_LOG_RETENTION_HOURS: "168"
  #     KAFKA_LOG_RETENTION_BYTES: "100000000"
  #     KAFKA_LOG_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
  #     KAFKA_CREATE_TOPICS: "log:3:3"
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
  
  zoo1:
    build:
      context: zookeeper/
      args:
        ZOO_VERSION: $ZOO_VERSION
    environment:
      MYID: 1
      # SERVERS: zoo1,zoo2,zoo3
      SERVERS: zoo1
    networks:
      - elk
    ports:
      - "2181:2181"

  # zoo2:
  #   build:
  #     context: zookeeper/
  #     args:
  #       ZOO_VERSION: $ZOO_VERSION
  #   environment:
  #     MYID: 2
  #     SERVERS: zoo1,zoo2,zoo3
  #   ports:
  #     - "2182:2181"

  # zoo3:
  #   build:
  #     context: zookeeper/
  #     args:
  #       ZOO_VERSION: $ZOO_VERSION
  #   environment:
  #     MYID: 3
  #     SERVERS: zoo1,zoo2,zoo3
  #   ports:
  #     - "2184:2181"

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
  
  filebeat:
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # - type: bind
      #   source: ./filebeat/filebeat.yml
      #   target: /usr/share/filebeat/filebeat.yml
      - "./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "./apache-logs:/apache-logs"
    networks:
      - elk
    depends_on:
      - apache
      - kafka1
      # - kafka2
      # - kafka3

  apache:
    image: lzrbear/docker-apache2-ubuntu
    volumes:
      - "./apache-logs:/var/log/apache2"
    ports:
      - "8888:80"
    depends_on:
      - logstash

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
